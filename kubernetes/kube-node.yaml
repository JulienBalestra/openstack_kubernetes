heat_template_version: 2014-10-16

description: >
  Fleet instance for Kubernetes

resources:
  random:
    type: OS::Heat::RandomString
    properties:
      length: 10
      sequence: lettersdigits

  port:
    depends_on: [ random ]
    type: OS::Neutron::Port
    properties:
      name:
        str_replace:
          template: bn%-rand%
          params:
            "bn%": { get_param: instance_basename }
            "rand%": { get_attr: [random, value] }
      network_id: { get_param: network }
      fixed_ips: [{ "subnet_id": { get_param: subnet } }]
      security_groups: [ { get_param: security_group } ]

  floating:
    type: OS::Neutron::FloatingIP
    depends_on: [ port ]
    properties:
      floating_network: { get_param: floatingip_network_name }
      port_id: { get_resource: port }

  instance:
    depends_on: [ port ]
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: bn%-rand%
          params:
            "bn%": { get_param: instance_basename }
            "rand%": { get_attr: [random, value] }
      user_data_format: RAW
      user_data: { get_resource: userdata }
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: port }
      scheduler_hints:
        group: { get_param: anti_affinity }

      metadata:
        etcd_initial_cluster: { get_param: etcd_initial_cluster }
        fleet_state: { get_param: fleet_state }

  userdata:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        preserve_hostname: false
        manage_etc_hosts: true
        package_update: false

        write_files:
          - path: /opt/bin/setup-etcd-environment
            permissions: 0755
            content: |
              #!/usr/bin/env bash

              set -e ; set -o pipefail

              DEFAULT_IPV4=$(curl 169.254.169.254/1.0/meta-data/local-ipv4)

              cat << EOF | tee /etc/etcd-environment
              ETCD_PROXY="on"
              ETCD_INITIAL_CLUSTER="$(curl http://169.254.169.254/openstack/latest/meta_data.json |
                jq -r -e .meta.etcd_initial_cluster)"
              ETCD_ADVERTISE_CLIENT_URLS="http://${DEFAULT_IPV4}:2379"
              ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379,http://0.0.0.0:4001"
              ETCD_LISTEN_PEER_URLS="http://${DEFAULT_IPV4}:2380,http://${DEFAULT_IPV4}:7001"
              EOF

          - path: /opt/bin/setup-fleet-environment
            permissions: 0755
            content: |
              #!/usr/bin/env bash

              set -e ; set -o pipefail

              cat << EOF | tee /etc/fleet-environment
              FLEET_METADATA="state=$(curl http://169.254.169.254/openstack/latest/meta_data.json |
                jq -r -e .meta.fleet_state),role=kube"
              EOF

              set +e

              for i in {0..10}
              do
                sleep $i
                etcdctl cluster-health && break
              done

          - path: /etc/kubernetes/conf/conf.d/kubelet.toml
            permissions: 0644
            content: |
              [template]
              src = "kubelet.tmpl"
              dest = "/etc/kubemaster"
              keys = ["/registry/services/endpoints/default/kubernetes"]
              owner = "root"
              mode = "0644"

          - path: /etc/kubernetes/conf/templates/kubelet.tmpl
            permissions: 0644
            content: |
              KUBE_MASTER_ENDPOINT={{$data := json (getv "/registry/services/endpoints/default/kubernetes")}}{{range $data.subsets}}{{range $idx, $svc := .addresses}}{{ if (eq $idx 0) }}{{.ip}}:{{getenv "PORT"}}{{end}}{{end}}{{end}}
              KUBE_MASTER_ENDPOINTS={{$data := json (getv "/registry/services/endpoints/default/kubernetes")}}{{range $data.subsets}}{{range $idx, $svc := .addresses}}{{ if (ne $idx 0) }},{{end}}{{.ip}}:{{getenv "PORT"}}{{end}}{{end}}

          - path: /etc/systemd/system/kubelet-confd.service
            permissions: 0644
            content: |
              [Unit]
              Description=Kubelet confd

              After=flanneld.service etcd.service fleet.service
              Requires=flanneld.service etcd.service fleet.service

              [Service]
              # TODO use a secure endpoint
              Environment=PORT=8080
              Environment=PROTOCOL=http

              Environment=UNIT=kubelet.service
              ExecStart=/usr/bin/confd -onetime -confdir=/etc/kubernetes/conf
              Type=oneshot

              [Install]
              WantedBy=multi-user.target

          - path: /etc/rkt/net.d/20-kubernetes.io.conf
            permissions: 0644
            content: |
              {
                  "name": "rkt.kubernetes.io",
                  "type": "flannel",
                  "delegate": {
                    "isDefaultGateway": true,
                    "ipMasq": true
                  }
              }

          - path: /etc/systemd/system/kubelet.service
            permissions: 0644
            content: |
              [Unit]
              Description=Kubelet

              After=flanneld.service etcd.service fleet.service kubelet-confd.service
              Requires=flanneld.service etcd.service fleet.service kubelet-confd.service

              [Service]
              EnvironmentFile=/etc/network-environment
              EnvironmentFile=/run/flannel/subnet.env
              Environment=CNI_DIR=/opt/cni

              EnvironmentFile=/etc/kubemaster

              ExecStart=/usr/bin/kubelet \
                --allow-privileged=true \
                --api-servers=${KUBE_MASTER_ENDPOINTS} \
                --cloud-provider="" \
                --cluster-dns=${DEFAULT_IPV4} \
                --cluster-domain=skydns.local \
                --container-runtime=rkt \
                --network-plugin-dir=${CNI_DIR} \
                --v=2

              Restart=always
              RestartSec=30

              [Install]
              WantedBy=multi-user.target

          - path: /var/lib/kubelet/kubeconfig
            permissions: 0644


          - path: /etc/systemd/system/kube-proxy.service
            permissions: 0644
            content: |
              [Unit]
              Description=Kubernetes proxy

              After=kubelet-confd.service
              Requires=kubelet-confd.service

              [Service]
              EnvironmentFile=/etc/network-environment
              EnvironmentFile=/run/flannel/subnet.env

              EnvironmentFile=/etc/kubemaster

              ExecStart=/usr/bin/kube-proxy \
                --master=${KUBE_MASTER_ENDPOINT} \
                --kubeconfig=/var/lib/kubelet/kubeconfig \
                --proxy-mode=iptables \
                --v=2

              Restart=always
              RestartSec=10

              [Install]
              WantedBy=multi-user.target

        runcmd:
          - set -x

          - cd /etc/systemd/system

          - systemctl daemon-reload
          - systemctl enable setup-etcd-environment.service
          - systemctl enable setup-fleet-environment.service
          - systemctl enable etcd.service
          - systemctl enable flanneld.service
          - systemctl enable fleet.socket
          - systemctl enable fleet.service
          - systemctl enable fleet-skydns.service
          - systemctl enable jds_kafka.service
          - systemctl enable traefik.service

          - systemctl start setup-etcd-environment.service
          - systemctl start etcd.service

          - systemctl start flanneld.service

          - systemctl start setup-fleet-environment.service
          - systemctl start fleet.service

          - systemctl start fleet-skydns.service

          - systemctl start fleet-jds_kafka.service

          - systemctl start kubelet.service
          - systemctl start kube-proxy.service

        final_message: "The system is finally up, after $UPTIME seconds"


parameters:
  key_name:
    type: string
    label: Name of keypair to assign to servers
    description: key_name=foo
    constraints:
      - custom_constraint: nova.keypair

  security_group:
    type: string

  network:
    type: string

  subnet:
    type: string

  image:
    type: string

  flavor:
    type: string

  anti_affinity:
    type: string

  instance_basename:
    type: string

  fleet_state:
    type: string

  etcd_initial_cluster:
    type: string
    description: "static0=http://192.168.1.10:2380,static1=http://192.168.1.11:2380,static2=http://192.168.1.12:2380"

  floatingip_network_name:
    type: string
    label: The Floating IP network for NAT
    description: floatingip_network_name=public